[tool.poetry]
name = "haomnilogic-local"
version = "0.0.3"
description = "A Home Assistant integration for Hayward OmniLogic/OmniHub pool controllers using the local UDP api"
authors = ["cryptk <cryptk@users.noreply.github.com>", "djtimca", "garionphx"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/cryptk/haomnilogic-local"

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.0.0"
mypy = "^1.2.0"
homeassistant = "^2023.5.0"
python_omnilogic_local = "0.10.0"
pylint = "^2.17.0"
pydantic = "^1.10.7"
pytest = "^7.3.1"

[tool.black]
line-length=140

[tool.codespell]
ignore-words-list="hass"
exclude-file="poetry.lock"

# All of the settings for isort, pylint, ruff, etc were shamelessly borrowed from homeassistant core
[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
known_first_party = [
    "homeassistant",
    "tests",
]
forced_separate = [
    "tests",
]
combine_as_imports = true

[tool.mypy]
python_version = "3.10"
plugins = "pydantic.mypy"
follow_imports = "silent"
strict = true
ignore_missing_imports = true
disallow_subclassing_any = false
warn_return_any = false
# local_partial_types = true
# strict_equality = true
# no_implicit_optional = true
# warn_incomplete_stub = true
# warn_redundant_casts = true
# warn_unused_configs = true
# warn_unused_ignores = true
# enable_error_code = "ignore-without-code, redundant-self, truthy-iterable"
# disable_error_code = "annotation-unchecked"
# strict_concatenate = false
# check_untyped_defs = true
# disallow_incomplete_defs = true
# disallow_untyped_calls = true
# disallow_untyped_decorators = true
# disallow_untyped_defs = true
# warn_unreachable = true
# no_implicit_reexport = true
# disallow_any_generics = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pylint.MAIN]
py-version = "3.10"
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
jobs = 2
load-plugins = [
    "pylint.extensions.code_style",
    "pylint.extensions.typing",
]
persistent = false
extension-pkg-allow-list = [
    "av.audio.stream",
    "av.stream",
    "ciso8601",
    "orjson",
    "cv2",
]
fail-on = [
    "I",
]

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
    "_",
    "ev",
    "ex",
    "fp",
    "i",
    "id",
    "j",
    "k",
    "Run",
    "ip",
]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# consider-using-f-string - str.format sometimes more readable
# ---
# Pylint CodeStyle plugin
# consider-using-namedtuple-or-dataclass - too opinionated
# consider-using-assignment-expr - decision to use := better left to devs
disable = [
    "format",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
    "wrong-import-position",
    "consider-using-f-string",
    "consider-using-namedtuple-or-dataclass",
    "consider-using-assignment-expr",
    # The below are only here for now, we should fully document once the codebase stops fluctuating so much
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",

]
enable = [
    "useless-suppression",  # temporarily every now and then to clean them up
    "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
    "_CountingAttr",  # for attrs
]
mixin-class-rgx = ".*[Mm]ix[Ii]n"

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"
# Maximum number of characters on a single line.
max-line-length=140

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
    # "homeassistant.exceptions.HomeAssistantError",  # too many issues
]

[tool.pylint.TYPING]
runtime-typing = false

[tool.pylint.CODE_STYLE]
max-line-length-suggestions = 72

[tool.pylint-per-file-ignores]
# hass-component-root-import: Tests test non-public APIs
# protected-access: Tests do often test internals a lot
# redefined-outer-name: Tests reference fixtures in the test function
"/tests/"="hass-component-root-import,protected-access,redefined-outer-name"

[tool.ruff]
target-version = "py310"
line-length = 140

select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "T20",  # flake8-print
    "TRY004", # Prefer TypeError exception for invalid type
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "D406",  # Section name should end with a newline
    "D407",  # Section name underlining
    "E501",  # line too long
    "E731",  # do not assign a lambda expression, use a def
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    # The below should be removed once we have docstrings for everything
    "D100",
    "D101",
    "D102",
    "D103",
    "D107"
]

[tool.ruff.flake8-import-conventions.extend-aliases]
voluptuous = "vol"
"homeassistant.helpers.area_registry" = "ar"
"homeassistant.helpers.config_validation" = "cv"
"homeassistant.helpers.device_registry" = "dr"
"homeassistant.helpers.entity_registry" = "er"
"homeassistant.helpers.issue_registry" = "ir"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.per-file-ignores]

# Allow for main entry & scripts to write to stdout
"homeassistant/__main__.py" = ["T201"]
"homeassistant/scripts/*" = ["T201"]
"script/*" = ["T20"]

[tool.ruff.mccabe]
max-complexity = 25
